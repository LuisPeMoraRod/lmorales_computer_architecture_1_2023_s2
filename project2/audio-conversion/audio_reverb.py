# -*- coding: utf-8 -*-
"""audio_reverb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OP2-_pewk0lOBAIClfFrCKL8rP0zHrMX

```
High level script test
```
"""

!pip install pydub

from pydub import AudioSegment
import numpy as np
from sklearn.preprocessing import MinMaxScaler

def agregar_reverberacion(audio, k, alpha):

    # Convertir el AudioSegment a un array NumPy
    audio_array = np.array(audio.get_array_of_samples())

    # Calcular el valor mínimo y máximo en el array
    valor_min = np.min(audio_array)
    valor_max = np.max(audio_array)

    scaled_array = (audio_array) / (20000)

    # Especificar el nombre del archivo de texto
    archivo = "decimal1.txt"

    min_scale = np.min(scaled_array)
    max_scale = np.max(scaled_array)


    # Guardar los valores escalados en el archivo de texto, uno por línea
    np.savetxt(archivo, scaled_array, delimiter='\n', fmt='%.6f')

    print(min_scale)
    print(max_scale)
    print(scaled_array)

    # Crear un array para el efecto de reverberación con ceros
    reverb = np.zeros_like(audio_array)

    # Agregar el efecto de reverberación
    for i in range(k, len(audio_array)):

        reverb[i]= (audio_array[i]-alpha*audio_array[i-k])/(1 - alpha)

    # Sumar el audio original con el efecto de reverberación
    audio_con_reverb = audio_array + reverb

    # Crear un nuevo AudioSegment con el audio modificado
    audio_modificado = AudioSegment(
        audio_con_reverb.tobytes(),
        frame_rate=audio.frame_rate,
        sample_width=audio.sample_width,
        channels=audio.channels
    )

    return audio_modificado


def quitar_reverberacion(audio,k,alpha):

# Convertir el AudioSegment a un array NumPy
    reverb_array = np.array(audio.get_array_of_samples())

    # Calcular el valor mínimo y máximo en el array
    valor_min = np.min(reverb_array)
    valor_max = np.max(reverb_array)

    original_array = (reverb_array) /34000

    archivo2 = "decimal2.txt"


    min_scale = np.min(original_array)
    max_scale = np.max(original_array)

    print(max_scale)
    print(min_scale)

    # Guardar los valores escalados en el archivo de texto, uno por línea
    np.savetxt(archivo2, original_array, delimiter='\n', fmt='%.6f')

def concatenar_archivos(archivo1, archivo2, archivo_salida):
    try:
        with open(archivo1, 'r') as file1, open(archivo2, 'r') as file2, open(archivo_salida, 'w') as output_file:
            # Leer el contenido del archivo 1 y escribirlo en el archivo de salida
            contenido_archivo1 = file1.read()
            output_file.write(contenido_archivo1)

            # Agregar una línea en blanco entre los dos archivos concatenados
            output_file.write('\n')

            # Leer el contenido del archivo 2 y escribirlo en el archivo de salida
            contenido_archivo2 = file2.read()
            output_file.write(contenido_archivo2)

        print("La concatenación se realizó con éxito en", archivo_salida)
    except FileNotFoundError:
        print("Error: Archivo no encontrado.")
    except Exception as e:
        print("Error:", str(e))

# Ejemplo de uso
archivo1 = "decimal1.txt"
archivo2 = "decimal2.txt"
archivo_salida = "decimal.txt"

concatenar_archivos(archivo1, archivo2, archivo_salida)


# Cargar el archivo de audio de entrada
entrada = AudioSegment.from_file("audioNuevo.wav")

entrada2 = AudioSegment.from_file("reverbAudio.wav")

# Definir el retardo y la atenuación
k = 50  # Ajusta el retardo según tus preferencias
alpha = 0.6  # Ajusta la atenuación según tus preferencias

# Agregar reverberación al audio de entrada
audio_con_reverberacion = agregar_reverberacion(entrada, k, alpha)
audio_sin_reverberacion = quitar_reverberacion(entrada2, k, alpha)


# Guardar el audio con reverberación
#audio_con_reverberacion.export("reverbAudio.wav", format="wav")

from pydub import AudioSegment
import numpy as np

def agregar_reverberacion(audio, k, alpha):
    audio_array = np.array(audio.get_array_of_samples())
    reverb = np.zeros_like(audio_array)

    for i in range(k, len(audio_array)):
        reverb[i] = (audio_array[i] - alpha * audio_array[i - k]) / (1 - alpha)

    audio_con_reverb = audio_array + reverb

    audio_modificado = AudioSegment(
        audio_con_reverb.tobytes(),
        frame_rate=audio.frame_rate,
        sample_width=audio.sample_width,
        channels=audio.channels
    )

    return audio_modificado

entrada = AudioSegment.from_file("audioClean.mp3")
k = 50  # Ajusta el retardo según tus preferencias
alpha = 0.6  # Ajusta la atenuación según tus preferencias

audio_con_reverberacion = agregar_reverberacion(entrada, k, alpha)

# Escalar los valores del audio en un rango de 1 a -1
max_val = np.max(np.abs(audio_con_reverberacion.get_array_of_samples()))
audio_con_reverberacion = audio_con_reverberacion.set_frame_rate(44100)  # Establecer la frecuencia de muestreo según sea necesario
audio_con_reverberacion = audio_con_reverberacion.set_sample_width(2)  # Establecer el ancho de muestra en 2 bytes

# Escalar los valores del audio y guardarlos en un archivo de texto
audio_scaled = np.array(audio_con_reverberacion.get_array_of_samples(), dtype=np.float32) / max_val
np.savetxt("audio_scaled.txt", audio_scaled, fmt='%.6f', delimiter='\n')

print("Valores de audio escalados guardados en 'audio_scaled.txt'")